{"version":3,"file":"legoino-navigator-serial.js","sources":["../src/util/EventEmitter.js","../node_modules/delay/index.js","../src/util/checkSerial.js","../src/Action.js","../src/Device.js","../src/DevicesManager.js"],"sourcesContent":["export default class EventEmitter {\n  constructor() {\n    this.callbacks = {};\n  }\n\n  on(event, cb) {\n    if (!this.callbacks[event]) this.callbacks[event] = [];\n    this.callbacks[event].push(cb);\n  }\n\n  emit(event, data) {\n    let cbs = this.callbacks[event];\n    if (cbs) {\n      cbs.forEach((cb) => cb(data));\n    }\n  }\n}\n","'use strict';\n\n// From https://github.com/sindresorhus/random-int/blob/c37741b56f76b9160b0b63dae4e9c64875128146/index.js#L13-L15\nconst randomInteger = (minimum, maximum) => Math.floor((Math.random() * (maximum - minimum + 1)) + minimum);\n\nconst createAbortError = () => {\n\tconst error = new Error('Delay aborted');\n\terror.name = 'AbortError';\n\treturn error;\n};\n\nconst createDelay = ({clearTimeout: defaultClear, setTimeout: set, willResolve}) => (ms, {value, signal} = {}) => {\n\tif (signal && signal.aborted) {\n\t\treturn Promise.reject(createAbortError());\n\t}\n\n\tlet timeoutId;\n\tlet settle;\n\tlet rejectFn;\n\tconst clear = defaultClear || clearTimeout;\n\n\tconst signalListener = () => {\n\t\tclear(timeoutId);\n\t\trejectFn(createAbortError());\n\t};\n\n\tconst cleanup = () => {\n\t\tif (signal) {\n\t\t\tsignal.removeEventListener('abort', signalListener);\n\t\t}\n\t};\n\n\tconst delayPromise = new Promise((resolve, reject) => {\n\t\tsettle = () => {\n\t\t\tcleanup();\n\t\t\tif (willResolve) {\n\t\t\t\tresolve(value);\n\t\t\t} else {\n\t\t\t\treject(value);\n\t\t\t}\n\t\t};\n\n\t\trejectFn = reject;\n\t\ttimeoutId = (set || setTimeout)(settle, ms);\n\t});\n\n\tif (signal) {\n\t\tsignal.addEventListener('abort', signalListener, {once: true});\n\t}\n\n\tdelayPromise.clear = () => {\n\t\tclear(timeoutId);\n\t\ttimeoutId = null;\n\t\tsettle();\n\t};\n\n\treturn delayPromise;\n};\n\nconst delay = createDelay({willResolve: true});\ndelay.reject = createDelay({willResolve: false});\ndelay.range = (minimum, maximum, options) => delay(randomInteger(minimum, maximum), options);\ndelay.createWithTimers = ({clearTimeout, setTimeout}) => {\n\tconst delay = createDelay({clearTimeout, setTimeout, willResolve: true});\n\tdelay.reject = createDelay({clearTimeout, setTimeout, willResolve: false});\n\treturn delay;\n};\n\nmodule.exports = delay;\n// TODO: Remove this for the next major release\nmodule.exports.default = delay;\n","export default function checkSerial(serial) {\n  if (!serial) {\n    console.error(\n      \"Web serial doesn't seem to be enabled in your browser. Try enabling it by visiting:\",\n    );\n    console.error('chrome://flags/#enable-experimental-web-platform-features');\n    console.error('opera://flags/#enable-experimental-web-platform-features');\n    console.error('edge://flags/#enable-experimental-web-platform-features');\n  }\n}\n","const STATUS_CREATED = 0;\nconst STATUS_COMMAND_SENT = 1;\nconst STATUS_ANSWER_PARTIALLY_RECEIVED = 2;\nconst STATUS_ANSWER_RECEIVED = 3;\nconst STATUS_RESOLVED = 4;\nconst STATUS_ERROR = 5;\n\nexport class Action {\n  constructor(command, options = {}) {\n    this.currentTimeout = undefined;\n    this.command = command;\n    this.timeout = options.timeout === undefined ? 1000 : options.timeout;\n    this.answer = '';\n    this.status = STATUS_CREATED;\n    this.creationTimestamp = Date.now();\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n    this.finishedPromise = new Promise((resolve) => {\n      this.finished = resolve;\n    });\n  }\n\n  isFinished() {\n    return this.status === STATUS_RESOLVED || this.status === STATUS_ERROR;\n  }\n\n  setTimeout() {\n    if (this.currentTimeout) {\n      clearTimeout(this.currentTimeout);\n    }\n    this.currentTimeout = setTimeout(() => {\n      if (this.status === STATUS_RESOLVED || this.status === STATUS_ERROR) {\n        return;\n      }\n      this.status = STATUS_ERROR;\n      this.reject('Timeout');\n      this.finished();\n    }, this.timeout);\n  }\n\n  start() {\n    this.startTimestamp = Date.now();\n    this.status = STATUS_COMMAND_SENT;\n    this.setTimeout();\n  }\n\n  appendAnswer(buffer) {\n    let string = new TextDecoder().decode(buffer);\n    this.status = STATUS_ANSWER_PARTIALLY_RECEIVED;\n    this.answer += string;\n    if (!this.answer.replace(/\\r/g, '').endsWith('\\n\\n')) return;\n    let lines = this.answer.split(/\\r?\\n/);\n    if (lines.length > 0 && lines[lines.length - 1] === '') {\n      lines = lines.filter((line) => line);\n      this.status = STATUS_ANSWER_RECEIVED;\n      this.resolve(lines.join('\\n'));\n      this.finished();\n      this.status = STATUS_RESOLVED;\n    }\n  }\n}\n","/* eslint-disable no-await-in-loop */\n\nimport delay from 'delay';\n\nimport { Action } from './Action';\n\nconst debug = console.log;\n\nexport const STATUS_OPENING = 1;\nexport const STATUS_OPENED = 2;\nexport const STATUS_CLOSED = 3;\nexport const STATUS_MISSING = 9;\nexport const STATUS_ERROR = 10;\n\nexport class Device {\n  constructor(serialPort, options = {}) {\n    this.status = STATUS_OPENING;\n    this.id = undefined;\n    this.serialPort = serialPort;\n    this.baudRate = options.baudRate || 115200;\n    this.queue = [];\n    this.action = undefined;\n    this.interCommandDelay = options.interCommandDelay;\n    this.defaultCommandExpirationDelay = 2000;\n    this.encoder = new TextEncoder();\n    this.decoder = new TextDecoder();\n  }\n\n  isReady() {\n    return this.status === STATUS_OPENED;\n  }\n\n  /** restart process queue if the previous one was finished */\n  async ensureProcessQueue() {\n    debug('ensureProcessQueue');\n    if (!this.currentProcessQueue) {\n      this.currentProcessQueue = this.runProcessQueue();\n    }\n    return this.currentProcessQueue;\n  }\n\n  async runProcessQueue() {\n    while (this.queue.length > 0) {\n      this.action = this.queue.shift();\n\n      if (this.action) {\n        this.action.start();\n        await this.write(`${this.action.command}\\n`);\n        await this.read(this.action);\n        await this.action.finishedPromise;\n        this.action = undefined;\n        await delay(this.interCommandDelay);\n      }\n    }\n    this.currentProcessQueue = undefined;\n  }\n\n  async getStatus() {\n    return {\n      value: this.status,\n    };\n  }\n\n  async ensureOpen() {\n    debug(`Ensure open`);\n    if (this.status !== STATUS_OPENED) {\n      return this.open();\n    }\n  }\n\n  async open() {\n    debug(`Opening`);\n    await this.serialPort.open({\n      baudRate: this.baudRate,\n    });\n    this.reader = this.serialPort.readable.getReader();\n    this.writer = this.serialPort.writable.getWriter();\n    this.id = await this.get('uq');\n    this.status = STATUS_OPENED;\n  }\n\n  /*\n   We need to add this command in the queue and wait it resolves or rejects\n  */\n  async get(command, options = {}) {\n    const {\n      commandExpirationDelay = this.defaultCommandExpirationDelay,\n    } = options;\n\n    const action = new Action(command, {\n      timeout: commandExpirationDelay,\n    });\n\n    this.queue.push(action);\n    this.ensureProcessQueue();\n    return action.promise;\n  }\n\n  error(error) {\n    debug(`Error ${this.port.path}`);\n    debug(error);\n    this.status = STATUS_ERROR;\n    this.emit('adapter', {\n      event: 'Error',\n      value: error,\n    });\n  }\n\n  close() {\n    debug(`Close`);\n    this.status = STATUS_CLOSED;\n  }\n\n  async write(data) {\n    const dataArrayBuffer = this.encoder.encode(data + '\\n');\n    return this.writer.write(dataArrayBuffer);\n  }\n\n  async read(action) {\n    while (!action.isFinished()) {\n      action.appendAnswer((await this.reader.read()).value);\n      delay(10);\n    }\n  }\n}\n","/* eslint-disable no-await-in-loop */\nimport EventEmitter from './util/EventEmitter';\n\nimport delay from 'delay';\nimport checkSerial from './util/checkSerial';\n\nimport { Device, STATUS_MISSING, STATUS_OPENED, STATUS_CLOSED } from './Device';\n\nconst debug = console.log;\n\n/**\n * Class creating a new serial bridge to manage serial ports.\n * @param {object} [options={}]\n * @param {function} [options.portFilter=[{usbProductId:37384, usbVendorId:6991}]] Filter the serial ports to address.\n * @param {number} [options.baudRate=57200] Baud rate\n * @param {number} [options.interCommandDelay=100] Time to wait between commands in [ms]\n * @param {number} [options.defaultCommandExpirationDelay=100] Time to wait for answer before timeout\n */\nexport class DevicesManager extends EventEmitter {\n  constructor(serial, options = {}) {\n    super();\n    checkSerial(serial);\n    this.serial = serial;\n    this.devices = [];\n    this.portFilter =\n      options.portFilter === undefined\n        ? [{ usbProductId: 37384, usbVendorId: 6991 }]\n        : options.portFilter;\n    this.baudRate = options.baudRate || 115200;\n    this.interCommandDelay =\n      options.interCommandDelay === undefined ? 100 : options.interCommandDelay;\n    this.defaultCommandExpirationDelay =\n      options.defaultCommandExpirationDelay === undefined\n        ? 100\n        : options.defaultCommandExpirationDelay;\n  }\n\n  /**\n   * By calling this method from a click you give users the possibility to allow access to some devices\n   */\n  async requestDevices() {\n    await this.serial.requestPort({\n      filters: this.portFilter,\n    });\n    return this.updateDevices();\n  }\n\n  /**\n   * Update this.devices\n   */\n  async updateDevices() {\n    const serialPorts = await this.serial.getPorts();\n\n    debug('updateDevices');\n\n    const missingDevicesSerialPort = this.devices.filter(\n      (device) => !serialPorts.includes(device.serialPort),\n    );\n    for (let device of missingDevicesSerialPort) {\n      if (device.status !== STATUS_MISSING && device.status !== STATUS_CLOSED) {\n        device.close();\n      }\n      device.status = STATUS_MISSING;\n    }\n\n    for (let serialPort of serialPorts) {\n      let device = this.devices.filter(\n        (device) => device.serialPort === serialPort,\n      )[0];\n      if (device) {\n        await device.ensureOpen();\n      } else {\n        let newDevice = new Device(serialPort, {\n          baudRate: this.baudRate,\n          interCommandDelay: this.interCommandDelay,\n          defaultCommandExpirationDelay: this.defaultCommandExpirationDelay,\n        });\n        this.devices.push(newDevice);\n        await newDevice.open();\n      }\n    }\n    // check if there are any new ports\n  }\n\n  /**\n   * Update this.devices every `scanInterval` [ms].\n   * @param {object} [options={}]\n   * @param {number} [options.scanInterval=1000] Delay between `updateDevices()` calls\n   * @param {number} [options.callback] Callback to execute on each update\n   */\n  async continuousUpdateDevices(options = {}) {\n    const { scanInterval = 1000, callback } = options;\n    while (true) {\n      await this.updateDevices();\n      if (callback) {\n        callback(this.devices);\n      }\n      await delay(scanInterval);\n    }\n  }\n\n  /**\n   * Returns this.devices\n   * @param {object} [options={}]\n   * @param {bool} [options.ready=false] If `true` returns only currently connected device. If `false` returns all devices ever connected.\n   * @returns {Array<object>}\n   */\n  getDevicesList(options = {}) {\n    let { ready = false } = options;\n    return this.devices\n      .filter((device) => !ready || device.isReady())\n      .map((device) => ({\n        status: device.status,\n        id: device.id,\n        queueLength: device.queue.length,\n      }));\n  }\n\n  // private function\n  findDevice(id) {\n    if (id === undefined) return undefined;\n    let devices = this.devices.filter(\n      (device) => device.id === id && device.status === STATUS_OPENED,\n    );\n    if (devices.length === 0) return undefined;\n    if (devices.length > 1) {\n      throw new Error(`Many devices have the same id: ${id}`);\n    }\n    return devices[0];\n  }\n\n  /**\n   * Send a serial command to a device.\n   * @param {number} id ID of the device\n   * @param {string} command Command to send\n   */\n  async sendCommand(id, command) {\n    const device = this.findDevice(id);\n    if (!device) {\n      throw Error(`Device ${id} not found`);\n    }\n    if (device && device.isReady()) return device.get(command);\n    throw Error(`Device ${id} not ready: ${device.port.path}`);\n  }\n}\n"],"names":["EventEmitter","constructor","callbacks","on","event","cb","push","emit","data","cbs","forEach","randomInteger","minimum","maximum","Math","floor","random","createAbortError","error","Error","name","createDelay","clearTimeout","defaultClear","setTimeout","set","willResolve","ms","value","signal","aborted","Promise","reject","timeoutId","settle","rejectFn","clear","signalListener","cleanup","removeEventListener","delayPromise","resolve","addEventListener","once","delay","range","options","createWithTimers","checkSerial","serial","console","STATUS_CREATED","STATUS_COMMAND_SENT","STATUS_ANSWER_PARTIALLY_RECEIVED","STATUS_ANSWER_RECEIVED","STATUS_RESOLVED","STATUS_ERROR","Action","command","currentTimeout","undefined","timeout","answer","status","creationTimestamp","Date","now","promise","finishedPromise","finished","isFinished","start","startTimestamp","appendAnswer","buffer","string","TextDecoder","decode","replace","endsWith","lines","split","length","filter","line","join","debug","log","STATUS_OPENING","STATUS_OPENED","STATUS_CLOSED","STATUS_MISSING","Device","serialPort","id","baudRate","queue","action","interCommandDelay","defaultCommandExpirationDelay","encoder","TextEncoder","decoder","isReady","ensureProcessQueue","currentProcessQueue","runProcessQueue","shift","write","read","getStatus","ensureOpen","open","reader","readable","getReader","writer","writable","getWriter","get","commandExpirationDelay","port","path","close","dataArrayBuffer","encode","DevicesManager","devices","portFilter","usbProductId","usbVendorId","requestDevices","requestPort","filters","updateDevices","serialPorts","getPorts","missingDevicesSerialPort","device","includes","newDevice","continuousUpdateDevices","scanInterval","callback","getDevicesList","ready","map","queueLength","findDevice","sendCommand"],"mappings":"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"}