{"version":3,"file":"legoino-navigator-serial.min.js","sources":["../node_modules/delay/index.js","../src/Action.js","../src/Device.js","../src/DevicesManager.js","../src/util/EventEmitter.js","../src/util/checkSerial.js"],"sourcesContent":["'use strict';\n\n// From https://github.com/sindresorhus/random-int/blob/c37741b56f76b9160b0b63dae4e9c64875128146/index.js#L13-L15\nconst randomInteger = (minimum, maximum) => Math.floor((Math.random() * (maximum - minimum + 1)) + minimum);\n\nconst createAbortError = () => {\n\tconst error = new Error('Delay aborted');\n\terror.name = 'AbortError';\n\treturn error;\n};\n\nconst createDelay = ({clearTimeout: defaultClear, setTimeout: set, willResolve}) => (ms, {value, signal} = {}) => {\n\tif (signal && signal.aborted) {\n\t\treturn Promise.reject(createAbortError());\n\t}\n\n\tlet timeoutId;\n\tlet settle;\n\tlet rejectFn;\n\tconst clear = defaultClear || clearTimeout;\n\n\tconst signalListener = () => {\n\t\tclear(timeoutId);\n\t\trejectFn(createAbortError());\n\t};\n\n\tconst cleanup = () => {\n\t\tif (signal) {\n\t\t\tsignal.removeEventListener('abort', signalListener);\n\t\t}\n\t};\n\n\tconst delayPromise = new Promise((resolve, reject) => {\n\t\tsettle = () => {\n\t\t\tcleanup();\n\t\t\tif (willResolve) {\n\t\t\t\tresolve(value);\n\t\t\t} else {\n\t\t\t\treject(value);\n\t\t\t}\n\t\t};\n\n\t\trejectFn = reject;\n\t\ttimeoutId = (set || setTimeout)(settle, ms);\n\t});\n\n\tif (signal) {\n\t\tsignal.addEventListener('abort', signalListener, {once: true});\n\t}\n\n\tdelayPromise.clear = () => {\n\t\tclear(timeoutId);\n\t\ttimeoutId = null;\n\t\tsettle();\n\t};\n\n\treturn delayPromise;\n};\n\nconst delay = createDelay({willResolve: true});\ndelay.reject = createDelay({willResolve: false});\ndelay.range = (minimum, maximum, options) => delay(randomInteger(minimum, maximum), options);\ndelay.createWithTimers = ({clearTimeout, setTimeout}) => {\n\tconst delay = createDelay({clearTimeout, setTimeout, willResolve: true});\n\tdelay.reject = createDelay({clearTimeout, setTimeout, willResolve: false});\n\treturn delay;\n};\n\nmodule.exports = delay;\n// TODO: Remove this for the next major release\nmodule.exports.default = delay;\n","const STATUS_CREATED = 0;\nconst STATUS_COMMAND_SENT = 1;\nconst STATUS_ANSWER_PARTIALLY_RECEIVED = 2;\nconst STATUS_ANSWER_RECEIVED = 3;\nconst STATUS_RESOLVED = 4;\nconst STATUS_ERROR = 5;\n\nexport class Action {\n  constructor(command, options = {}) {\n    this.currentTimeout = undefined;\n    this.command = command;\n    this.timeout = options.timeout === undefined ? 1000 : options.timeout;\n    this.answer = '';\n    this.status = STATUS_CREATED;\n    this.creationTimestamp = Date.now();\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n    this.finishedPromise = new Promise((resolve) => {\n      this.finished = resolve;\n    });\n  }\n\n  isFinished() {\n    return this.status === STATUS_RESOLVED || this.status === STATUS_ERROR;\n  }\n\n  setTimeout() {\n    if (this.currentTimeout) {\n      clearTimeout(this.currentTimeout);\n    }\n    this.currentTimeout = setTimeout(() => {\n      if (this.status === STATUS_RESOLVED || this.status === STATUS_ERROR) {\n        return;\n      }\n      this.status = STATUS_ERROR;\n      this.reject('Timeout');\n      this.finished();\n    }, this.timeout);\n  }\n\n  start() {\n    this.startTimestamp = Date.now();\n    this.status = STATUS_COMMAND_SENT;\n    this.setTimeout();\n  }\n\n  appendAnswer(buffer) {\n    let string = new TextDecoder().decode(buffer);\n    this.status = STATUS_ANSWER_PARTIALLY_RECEIVED;\n    this.answer += string;\n    if (!this.answer.replace(/\\r/g, '').endsWith('\\n\\n')) return;\n    let lines = this.answer.split(/\\r?\\n/);\n    if (lines.length > 0 && lines[lines.length - 1] === '') {\n      lines = lines.filter((line) => line);\n      this.status = STATUS_ANSWER_RECEIVED;\n      this.resolve(lines.join('\\n'));\n      this.finished();\n      this.status = STATUS_RESOLVED;\n    }\n  }\n}\n","/* eslint-disable no-await-in-loop */\n\nimport delay from 'delay';\n\nimport { Action } from './Action';\n\nconst debug = console.log;\n\nexport const STATUS_OPENING = 1;\nexport const STATUS_OPENED = 2;\nexport const STATUS_CLOSED = 3;\nexport const STATUS_MISSING = 9;\nexport const STATUS_ERROR = 10;\n\nexport class Device {\n  constructor(serialPort, options = {}) {\n    this.status = STATUS_OPENING;\n    this.id = undefined;\n    this.serialPort = serialPort;\n    this.baudRate = options.baudRate || 115200;\n    this.queue = [];\n    this.action = undefined;\n    this.interCommandDelay = options.interCommandDelay;\n    this.defaultCommandExpirationDelay = 2000;\n    this.encoder = new TextEncoder();\n    this.decoder = new TextDecoder();\n  }\n\n  isReady() {\n    return this.status === STATUS_OPENED;\n  }\n\n  /** restart process queue if the previous one was finished */\n  async ensureProcessQueue() {\n    debug('ensureProcessQueue');\n    if (!this.currentProcessQueue) {\n      this.currentProcessQueue = this.runProcessQueue();\n    }\n    return this.currentProcessQueue;\n  }\n\n  async runProcessQueue() {\n    while (this.queue.length > 0) {\n      this.action = this.queue.shift();\n\n      if (this.action) {\n        this.action.start();\n        await this.write(`${this.action.command}\\n`);\n        await this.read(this.action);\n        await this.action.finishedPromise;\n        this.action = undefined;\n        await delay(this.interCommandDelay);\n      }\n    }\n    this.currentProcessQueue = undefined;\n  }\n\n  async getStatus() {\n    return {\n      value: this.status,\n    };\n  }\n\n  async ensureOpen() {\n    debug(`Ensure open`);\n    if (this.status !== STATUS_OPENED) {\n      return this.open();\n    }\n  }\n\n  async open() {\n    debug(`Opening`);\n    await this.serialPort.open({\n      baudRate: this.baudRate,\n    });\n    this.reader = this.serialPort.readable.getReader();\n    this.writer = this.serialPort.writable.getWriter();\n    this.id = await this.get('uq');\n    this.status = STATUS_OPENED;\n  }\n\n  /*\n   We need to add this command in the queue and wait it resolves or rejects\n  */\n  async get(command, options = {}) {\n    const {\n      commandExpirationDelay = this.defaultCommandExpirationDelay,\n    } = options;\n\n    const action = new Action(command, {\n      timeout: commandExpirationDelay,\n    });\n\n    this.queue.push(action);\n    this.ensureProcessQueue();\n    return action.promise;\n  }\n\n  error(error) {\n    debug(`Error ${this.port.path}`);\n    debug(error);\n    this.status = STATUS_ERROR;\n    this.emit('adapter', {\n      event: 'Error',\n      value: error,\n    });\n  }\n\n  close() {\n    debug(`Close`);\n    this.status = STATUS_CLOSED;\n  }\n\n  async write(data) {\n    const dataArrayBuffer = this.encoder.encode(data + '\\n');\n    return this.writer.write(dataArrayBuffer);\n  }\n\n  async read(action) {\n    while (!action.isFinished()) {\n      action.appendAnswer((await this.reader.read()).value);\n      delay(10);\n    }\n  }\n}\n","/* eslint-disable no-await-in-loop */\nimport EventEmitter from './util/EventEmitter';\n\nimport delay from 'delay';\nimport checkSerial from './util/checkSerial';\n\nimport { Device, STATUS_MISSING, STATUS_OPENED, STATUS_CLOSED } from './Device';\n\nconst debug = console.log;\n\n/**\n * Class creating a new serial bridge to manage serial ports.\n * @param {object} [options={}]\n * @param {function} [options.portFilter=[{usbProductId:37384, usbVendorId:6991}]] Filter the serial ports to address.\n * @param {number} [options.baudRate=57200] Baud rate\n * @param {number} [options.interCommandDelay=100] Time to wait between commands in [ms]\n * @param {number} [options.defaultCommandExpirationDelay=100] Time to wait for answer before timeout\n */\nexport class DevicesManager extends EventEmitter {\n  constructor(serial, options = {}) {\n    super();\n    checkSerial(serial);\n    this.serial = serial;\n    this.devices = [];\n    this.portFilter =\n      options.portFilter === undefined\n        ? [{ usbProductId: 37384, usbVendorId: 6991 }]\n        : options.portFilter;\n    this.baudRate = options.baudRate || 115200;\n    this.interCommandDelay =\n      options.interCommandDelay === undefined ? 100 : options.interCommandDelay;\n    this.defaultCommandExpirationDelay =\n      options.defaultCommandExpirationDelay === undefined\n        ? 100\n        : options.defaultCommandExpirationDelay;\n  }\n\n  /**\n   * By calling this method from a click you give users the possibility to allow access to some devices\n   */\n  async requestDevices() {\n    await this.serial.requestPort({\n      filters: this.portFilter,\n    });\n    return this.updateDevices();\n  }\n\n  /**\n   * Update this.devices\n   */\n  async updateDevices() {\n    const serialPorts = await this.serial.getPorts();\n\n    debug('updateDevices');\n\n    const missingDevicesSerialPort = this.devices.filter(\n      (device) => !serialPorts.includes(device.serialPort),\n    );\n    for (let device of missingDevicesSerialPort) {\n      if (device.status !== STATUS_MISSING && device.status !== STATUS_CLOSED) {\n        device.close();\n      }\n      device.status = STATUS_MISSING;\n    }\n\n    for (let serialPort of serialPorts) {\n      let device = this.devices.filter(\n        (device) => device.serialPort === serialPort,\n      )[0];\n      if (device) {\n        await device.ensureOpen();\n      } else {\n        let newDevice = new Device(serialPort, {\n          baudRate: this.baudRate,\n          interCommandDelay: this.interCommandDelay,\n          defaultCommandExpirationDelay: this.defaultCommandExpirationDelay,\n        });\n        this.devices.push(newDevice);\n        await newDevice.open();\n      }\n    }\n    // check if there are any new ports\n  }\n\n  /**\n   * Update this.devices every `scanInterval` [ms].\n   * @param {object} [options={}]\n   * @param {number} [options.scanInterval=1000] Delay between `updateDevices()` calls\n   * @param {number} [options.callback] Callback to execute on each update\n   */\n  async continuousUpdateDevices(options = {}) {\n    const { scanInterval = 1000, callback } = options;\n    while (true) {\n      await this.updateDevices();\n      if (callback) {\n        callback(this.devices);\n      }\n      await delay(scanInterval);\n    }\n  }\n\n  /**\n   * Returns this.devices\n   * @param {object} [options={}]\n   * @param {bool} [options.ready=false] If `true` returns only currently connected device. If `false` returns all devices ever connected.\n   * @returns {Array<object>}\n   */\n  getDevicesList(options = {}) {\n    let { ready = false } = options;\n    return this.devices\n      .filter((device) => !ready || device.isReady())\n      .map((device) => ({\n        status: device.status,\n        id: device.id,\n        queueLength: device.queue.length,\n      }));\n  }\n\n  // private function\n  findDevice(id) {\n    if (id === undefined) return undefined;\n    let devices = this.devices.filter(\n      (device) => device.id === id && device.status === STATUS_OPENED,\n    );\n    if (devices.length === 0) return undefined;\n    if (devices.length > 1) {\n      throw new Error(`Many devices have the same id: ${id}`);\n    }\n    return devices[0];\n  }\n\n  /**\n   * Send a serial command to a device.\n   * @param {number} id ID of the device\n   * @param {string} command Command to send\n   */\n  async sendCommand(id, command) {\n    const device = this.findDevice(id);\n    if (!device) {\n      throw Error(`Device ${id} not found`);\n    }\n    if (device && device.isReady()) return device.get(command);\n    throw Error(`Device ${id} not ready: ${device.port.path}`);\n  }\n}\n","export default class EventEmitter {\n  constructor() {\n    this.callbacks = {};\n  }\n\n  on(event, cb) {\n    if (!this.callbacks[event]) this.callbacks[event] = [];\n    this.callbacks[event].push(cb);\n  }\n\n  emit(event, data) {\n    let cbs = this.callbacks[event];\n    if (cbs) {\n      cbs.forEach((cb) => cb(data));\n    }\n  }\n}\n","export default function checkSerial(serial) {\n  if (!serial) {\n    console.error(\n      \"Web serial doesn't seem to be enabled in your browser. Try enabling it by visiting:\",\n    );\n    console.error('chrome://flags/#enable-experimental-web-platform-features');\n    console.error('opera://flags/#enable-experimental-web-platform-features');\n    console.error('edge://flags/#enable-experimental-web-platform-features');\n  }\n}\n"],"names":["createAbortError","error","Error","name","createDelay","clearTimeout","defaultClear","setTimeout","set","willResolve","ms","value","signal","aborted","Promise","reject","timeoutId","settle","rejectFn","clear","signalListener","delayPromise","resolve","removeEventListener","addEventListener","once","delay","range","minimum","maximum","options","Math","floor","random","randomInteger","createWithTimers","Action","constructor","command","currentTimeout","undefined","timeout","answer","status","creationTimestamp","Date","now","promise","finishedPromise","finished","isFinished","this","start","startTimestamp","appendAnswer","buffer","string","TextDecoder","decode","replace","endsWith","lines","split","length","filter","line","join","debug","console","log","Device","serialPort","id","baudRate","queue","action","interCommandDelay","defaultCommandExpirationDelay","encoder","TextEncoder","decoder","isReady","currentProcessQueue","runProcessQueue","shift","write","read","open","reader","readable","getReader","writer","writable","getWriter","get","commandExpirationDelay","push","ensureProcessQueue","port","path","emit","event","close","data","dataArrayBuffer","encode","callbacks","on","cb","cbs","forEach","serial","checkSerial","devices","portFilter","usbProductId","usbVendorId","requestPort","filters","updateDevices","serialPorts","getPorts","missingDevicesSerialPort","device","includes","ensureOpen","newDevice","scanInterval","callback","getDevicesList","ready","map","queueLength","findDevice"],"mappings":"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"}