{"version":3,"file":"legoino-navigator-serial.min.js","sources":["../node_modules/delay/index.js","../src/Action.js","../src/Device.js","../src/util/EventEmitter.js","../node_modules/@lukeed/uuid/dist/index.mjs","../src/grbl/errorsDescription.js","../src/grbl/parametersDescription.js","../src/grbl/settingsDescription.js","../src/grbl/updateStatus.js","../src/grbl/grbl.js","../src/DevicesManager.js","../src/util/checkSerial.js","../src/terminal/Terminal.js"],"sourcesContent":["'use strict';\n\n// From https://github.com/sindresorhus/random-int/blob/c37741b56f76b9160b0b63dae4e9c64875128146/index.js#L13-L15\nconst randomInteger = (minimum, maximum) => Math.floor((Math.random() * (maximum - minimum + 1)) + minimum);\n\nconst createAbortError = () => {\n\tconst error = new Error('Delay aborted');\n\terror.name = 'AbortError';\n\treturn error;\n};\n\nconst createDelay = ({clearTimeout: defaultClear, setTimeout: set, willResolve}) => (ms, {value, signal} = {}) => {\n\tif (signal && signal.aborted) {\n\t\treturn Promise.reject(createAbortError());\n\t}\n\n\tlet timeoutId;\n\tlet settle;\n\tlet rejectFn;\n\tconst clear = defaultClear || clearTimeout;\n\n\tconst signalListener = () => {\n\t\tclear(timeoutId);\n\t\trejectFn(createAbortError());\n\t};\n\n\tconst cleanup = () => {\n\t\tif (signal) {\n\t\t\tsignal.removeEventListener('abort', signalListener);\n\t\t}\n\t};\n\n\tconst delayPromise = new Promise((resolve, reject) => {\n\t\tsettle = () => {\n\t\t\tcleanup();\n\t\t\tif (willResolve) {\n\t\t\t\tresolve(value);\n\t\t\t} else {\n\t\t\t\treject(value);\n\t\t\t}\n\t\t};\n\n\t\trejectFn = reject;\n\t\ttimeoutId = (set || setTimeout)(settle, ms);\n\t});\n\n\tif (signal) {\n\t\tsignal.addEventListener('abort', signalListener, {once: true});\n\t}\n\n\tdelayPromise.clear = () => {\n\t\tclear(timeoutId);\n\t\ttimeoutId = null;\n\t\tsettle();\n\t};\n\n\treturn delayPromise;\n};\n\nconst createWithTimers = clearAndSet => {\n\tconst delay = createDelay({...clearAndSet, willResolve: true});\n\tdelay.reject = createDelay({...clearAndSet, willResolve: false});\n\tdelay.range = (minimum, maximum, options) => delay(randomInteger(minimum, maximum), options);\n\treturn delay;\n};\n\nconst delay = createWithTimers();\ndelay.createWithTimers = createWithTimers;\n\nmodule.exports = delay;\n// TODO: Remove this for the next major release\nmodule.exports.default = delay;\n","import delay from 'delay';\n\nconst STATUS_CREATED = 0;\nconst STATUS_COMMAND_SENT = 10;\nconst STATUS_WAITING_RECEIVING = 20;\nconst STATUS_ANSWER_PARTIALLY_RECEIVED = 30;\nconst STATUS_ANSWER_RECEIVED = 40;\nconst STATUS_RESOLVED = 50;\nconst STATUS_ERROR = 60;\n\nconst encoder = new TextEncoder();\nconst decoder = new TextDecoder();\nexport class Action {\n  constructor(command, device, options = {}) {\n    this.device = device;\n    this.currentTimeout = undefined;\n    this.command = command;\n    this.timeout = options.timeout ?? 100;\n    this.timeoutResolve = options.timeoutResolve ?? false;\n    this.kind = options.kind ?? 'writeRead';\n    this.answer = '';\n    this.partialAnswer = '';\n    this.logger = options.logger;\n    this.status = STATUS_CREATED;\n    this.creationTimestamp = Date.now();\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n    this.isEndCommandAnswer =\n      options.isEndCommandAnswer ??\n      (() => {\n        throw new Error('isEndCommandAnswer is not defined');\n      });\n    this.endCommandAnswerCallback =\n      options.endCommandAnswerCallback ??\n      (() => {\n        throw new Error('endCommandAnswerCallback is not defined');\n      });\n    this.logger?.info('Action created');\n  }\n\n  isFinished() {\n    return this.status === STATUS_RESOLVED || this.status === STATUS_ERROR;\n  }\n\n  setTimeout() {\n    if (this.currentTimeout) {\n      clearTimeout(this.currentTimeout);\n    }\n    this.currentTimeout = setTimeout(() => {\n      if (this.status === STATUS_RESOLVED || this.status === STATUS_ERROR) {\n        return;\n      }\n      if (this.timeoutResolve) {\n        this.status = STATUS_RESOLVED;\n        this.resolve(this.partialAnswer);\n        this.device.terminal?.receive(this.partialAnswer);\n        this.logger?.info(`Timeout resolved after ${this.timeout}ms`);\n      } else {\n        this.status = STATUS_ERROR;\n        this.reject(this.partialAnswer);\n        this.device.terminal?.receive(this.partialAnswer);\n        this.logger?.error(`Timeout reject after ${this.timeout}ms`);\n      }\n    }, this.timeout);\n  }\n\n  async writeRead() {\n    this.startTimestamp = Date.now();\n    this.status = STATUS_COMMAND_SENT;\n    await this.setTimeout();\n    this.writeText(this.command)\n      .then(async () => {\n        await this.readText();\n        this.status = STATUS_ANSWER_RECEIVED;\n        this.answer = this.endCommandAnswerCallback(\n          this.command,\n          this.partialAnswer,\n        );\n      })\n      .then(() => {\n        this.status = STATUS_RESOLVED;\n        this.resolve(this.answer);\n      });\n    return this.promise;\n  }\n\n  async writeText(command) {\n    if (!command) return;\n    const dataArrayBuffer = encoder.encode(`${command}\\n`);\n    this.device.terminal?.send(command);\n    return this.device.writer.write(dataArrayBuffer);\n  }\n\n  async readText() {\n    this.status = STATUS_ANSWER_PARTIALLY_RECEIVED;\n    while (this.status === STATUS_ANSWER_PARTIALLY_RECEIVED) {\n      const chunk = await this.device.reader.read();\n      if (chunk.value.length > 0) {\n        // as long as we receive, we delay the timeout\n        this.setTimeout();\n      }\n      this.partialAnswer += decoder.decode(chunk.value);\n      if (this.isEndCommandAnswer(this.command, this.partialAnswer)) break;\n      await delay(1);\n    }\n    this.device.terminal?.receive(this.partialAnswer);\n  }\n}\n","import delay from 'delay';\n\nimport { Action } from './Action';\n\nexport const STATUS_OPENING = 1;\nexport const STATUS_OPENED = 2;\nexport const STATUS_CLOSED = 3;\nexport const STATUS_MISSING = 9;\nexport const STATUS_ERROR = 10;\nconst statusLabels = {\n  [STATUS_OPENING]: 'opening',\n  [STATUS_OPENED]: 'opened',\n  [STATUS_CLOSED]: 'closed',\n  [STATUS_MISSING]: 'missing',\n  [STATUS_ERROR]: 'error',\n};\n\nexport class Device {\n  constructor(serialPort, options = {}) {\n    const { commandOptions = {}, deviceOptions = {} } = options;\n    this.logger = options.logger;\n    this.terminal = options.terminal;\n    this.setStatus(STATUS_OPENING);\n    this.id = undefined;\n    this.serialPort = serialPort;\n    this.baudRate = deviceOptions.baudRate || 115200;\n    this.interCommandDelay = deviceOptions.interCommandDelay || 10;\n    this.getID =\n      deviceOptions.getID ??\n      (async (device) => {\n        return `${device.usbVendorId}-${device.usbProductId}`;\n      });\n    this.timeout = deviceOptions.timeout || 100;\n    this.commandOptions = commandOptions;\n\n    this.queue = [];\n    this.action = undefined;\n\n    this.usbVendorId = options.usbVendorId;\n    this.usbProductId = options.usbProductId;\n    this.logger?.info(`Device created`);\n  }\n\n  setStatus(status) {\n    this.status = status;\n    this.statusLabel = statusLabels[status];\n  }\n\n  isReady() {\n    return this.status === STATUS_OPENED;\n  }\n\n  /** restart process queue if the previous one was finished */\n  async ensureProcessQueue() {\n    this.logger?.info('ensureProcessQueue');\n    if (!this.currentProcessQueue) {\n      this.currentProcessQueue = this.runProcessQueue();\n    }\n    return this.currentProcessQueue;\n  }\n\n  async runProcessQueue() {\n    while (this.queue.length > 0) {\n      this.action = this.queue.shift();\n      if (this.action) {\n        await this.action\n          .writeRead()\n          .then((value) => {\n            this.logger?.info(\n              { command: this.action.command, answer: this.action.answer },\n              'Resolve writeRead command',\n            );\n          })\n          .catch((error) => {\n            this.logger?.error(\n              {\n                command: this.action.command,\n                answer: this.action.partialAnswer,\n              },\n              error.toString(),\n            );\n          });\n\n        this.action = undefined;\n        await delay(this.interCommandDelay);\n      }\n    }\n    this.currentProcessQueue = undefined;\n  }\n\n  async getStatus() {\n    return {\n      value: this.status,\n    };\n  }\n\n  async ensureOpen() {\n    this.logger?.trace(`Ensure open`);\n    let counter = 0;\n    // we wait for the serial port to be opened for max 1s\n    while (this.status === STATUS_OPENING && counter++ < 100) {\n      await delay(10);\n    }\n\n    if (this.status !== STATUS_OPENED) {\n      return this.open();\n    }\n  }\n\n  async open() {\n    this.logger?.info(`Opening`);\n    await this.serialPort\n      .open({\n        baudRate: this.baudRate,\n      })\n      .catch((error) => {\n        this.error(error);\n        this.close();\n      })\n      .then(() => {\n        this.ensureOpen();\n      });\n    this.reader = this.serialPort.readable.getReader();\n    this.writer = this.serialPort.writable.getWriter();\n    this.logger?.info(`Getting id`);\n\n    this.id = await this.getID(this);\n\n    this.logger?.info(`Id: ${this.id}`);\n    this.setStatus(STATUS_OPENED);\n  }\n\n  /*\n   We need to add this command in the queue and wait it resolves or rejects\n  */\n  async get(command, options = {}) {\n    const { timeout = this.timeout, timeoutResolve = false } = options;\n\n    const action = new Action(command, this, {\n      ...this.commandOptions,\n      timeout,\n      timeoutResolve,\n      logger: this.logger.child({ kind: 'Command', command }),\n    });\n\n    this.queue.push(action);\n    this.ensureProcessQueue();\n    return action.promise;\n  }\n\n  error(error) {\n    this.logger?.error(error, `Error ${this.serialPort?.path}`);\n    this.setStatus(STATUS_ERROR);\n    /**\n    this.emit('adapter', {\n      event: 'Error',\n      value: error,\n    });\n    **/\n  }\n\n  close() {\n    this.logger?.info(`Close`);\n    this.setStatus(STATUS_CLOSED);\n  }\n}\n","export default class EventEmitter {\n  constructor() {\n    this.callbacks = {};\n  }\n\n  on(event, cb) {\n    if (!this.callbacks[event]) this.callbacks[event] = [];\n    this.callbacks[event].push(cb);\n  }\n\n  emit(event, data) {\n    let cbs = this.callbacks[event];\n    if (cbs) {\n      cbs.forEach((cb) => cb(data));\n    }\n  }\n}\n","var IDX=256, HEX=[], BUFFER;\nwhile (IDX--) HEX[IDX] = (IDX + 256).toString(16).substring(1);\n\nexport function v4() {\n\tvar i=0, num, out='';\n\n\tif (!BUFFER || ((IDX + 16) > 256)) {\n\t\tBUFFER = Array(i=256);\n\t\twhile (i--) BUFFER[i] = 256 * Math.random() | 0;\n\t\ti = IDX = 0;\n\t}\n\n\tfor (; i < 16; i++) {\n\t\tnum = BUFFER[IDX + i];\n\t\tif (i==6) out += HEX[num & 15 | 64];\n\t\telse if (i==8) out += HEX[num & 63 | 128];\n\t\telse out += HEX[num];\n\n\t\tif (i & 1 && i > 1 && i < 11) out += '-';\n\t}\n\n\tIDX++;\n\treturn out;\n}\n","export const errorsDescription = {\n  1: 'G-code words consist of a letter and a value. Letter was not found.',\n  2: 'Numeric value format is not valid or missing an expected value.',\n  3: 'Grbl `$` system command was not recognized or supported.',\n  4: 'Negative value received for an expected positive value.',\n  5: 'Homing cycle is not enabled via settings.',\n  6: 'Minimum step pulse time must be greater than 3usec',\n  7: 'EEPROM read failed. Reset and restored to default values.',\n  8: 'Grbl `$` command cannot be used unless Grbl is IDLE. Ensures smooth operation during a job.',\n  9: 'G-code locked out during alarm or jog state',\n  10: 'Soft limits cannot be enabled without homing also enabled.',\n  11: 'Max characters per line exceeded. Line was not processed and executed.',\n  12: '(Compile Option) Grbl `$` setting value exceeds the maximum step rate supported.',\n  13: 'Safety door detected as opened and door state initiated.',\n  14: '(Grbl-Mega Only) Build info or startup line exceeded EEPROM line length limit.',\n  15: 'Jog target exceeds machine travel. Command ignored.',\n  16: 'Jog command with no `=` or contains prohibited g-code.',\n  17: 'Laser mode disabled. Requires PWM output.',\n  20: 'Unsupported or invalid g-code command found in block.',\n  21: 'More than one g-code command from same modal group found in block.',\n  22: 'Feed rate has not yet been set or is undefined.',\n  23: 'G-code command in block requires an integer value.',\n  24: 'Two G-code commands that both require the use of the `XYZ` axis words were detected in the block.',\n  25: 'A G-code word was repeated in the block.',\n  26: 'A G-code command implicitly or explicitly requires `XYZ` axis words in the block, but none were detected.',\n  27: '`N` line number value is not within the valid range of `1` - `9,999,999`.',\n  28: 'A G-code command was sent, but is missing some required `P` or `L` value words in the line.',\n  29: 'Grbl supports six work coordinate systems `G54-G59`. `G59.1`, `G59.2`, and `G59.3` are not supported.',\n  30: 'The `G53` G-code command requires either a `G0` seek or `G1` feed motion mode to be active. A different motion was active.',\n  31: 'There are unused axis words in the block and `G80` motion mode cancel is active.',\n  32: 'A `G2` or `G3` arc was commanded but there are no `XYZ` axis words in the selected plane to trace the arc.',\n  33: 'The motion command has an invalid target. `G2`, `G3`, and `G38.2` generates this error, if the arc is impossible to generate or if the probe target is the current position.',\n  34: 'A `G2` or `G3` arc, traced with the radius definition, had a mathematical error when computing the arc geometry. Try either breaking up the arc into semi-circles or quadrants, or redefine them with the arc offset definition.',\n  35: 'A `G2` or `G3` arc, traced with the offset definition, is missing the `IJK` offset word in the selected plane to trace the arc.',\n  36: \"There are unused, leftover G-code words that aren't used by any command in the block.\",\n  37: 'The `G43.1` dynamic tool length offset command cannot apply an offset to an axis other than its configured axis. The Grbl default axis is the Z-axis.',\n  38: 'Tool number greater than max supported value.',\n};\n","export const parametersDescription = {};\n","export const settingsDescription = {\n  $0: 'Step pulse time, microseconds',\n  $1: 'Step idle delay, milliseconds',\n  $2: 'Step pulse invert, mask',\n  $3: 'Step direction invert, mask',\n  $4: 'Invert step enable pin, boolean',\n  $5: 'Invert limit pins, boolean',\n  $6: 'Invert probe pin, boolean',\n  $10: 'Status report options, mask',\n  $11: 'Junction deviation, millimeters',\n  $12: 'Arc tolerance, millimeters',\n  $13: 'Report in inches, boolean',\n  $20: 'Soft limits enable, boolean',\n  $21: 'Hard limits enable, boolean',\n  $22: 'Homing cycle enable, boolean',\n  $23: 'Homing direction invert, mask',\n  $24: 'Homing locate feed rate, mm/min',\n  $25: 'Homing search seek rate, mm/min ',\n  $26: 'Homing switch debounce delay, milliseconds',\n  $27: 'Homing switch pull-off distance, millimeters',\n  $30: 'Maximum spindle speed, RPM',\n  $31: 'Minimum spindle speed, RPM',\n  $32: 'Laser-mode enable, boolean',\n  $100: 'X-axis steps per millimeter',\n  $101: 'Y-axis steps per millimeter',\n  $102: 'Z-axis steps per millimeter',\n  $110: 'X-axis maximum rate, mm/min',\n  $111: 'Y-axis maximum rate, mm/min',\n  $112: 'Z-axis maximum rate, mm/min',\n  $120: 'X-axis acceleration, mm/sec^2',\n  $121: 'Y-axis acceleration, mm/sec^2',\n  $122: 'Z-axis acceleration, mm/sec^2',\n  $130: 'X-axis maximum travel, millimeters',\n  $131: 'Y-axis maximum travel, millimeters',\n  $132: 'Z-axis maximum travel, millimeters',\n};\n","import { errorsDescription } from './errorsDescription.js';\nimport { parametersDescription } from './parametersDescription.js';\nimport { settingsDescription } from './settingsDescription.js';\n\nexport function updateStatus(input, status) {\n  const lines = input.split(/\\r?\\n/);\n\n  for (let line of lines) {\n    if (line.startsWith('<')) {\n      parseQuestionMark(line, status);\n    }\n    if (line.startsWith('[')) {\n      parseParameters(line, status);\n    }\n    if (line.startsWith('$')) {\n      parseSettings(line, status);\n    }\n    if (line.startsWith('Grbl')) {\n      status.version = line.replace('Grbl ', '');\n    }\n    if (line.startsWith('error')) {\n      parseErrors(line, status);\n    }\n  }\n}\n\nfunction parseErrors(line, status) {\n  const [, error] = line.split(':');\n  status.error = {\n    code: error,\n    description: errorsDescription[error],\n  };\n}\n\nfunction parseSettings(line, status) {\n  const [key, value] = line.split('=');\n  status.settings[key] = {\n    key,\n    description: settingsDescription[key],\n    value: Number(value),\n  };\n}\n\nfunction parseParameters(line, status) {\n  const [key, value] = line.replace(/\\[(.*)\\]/, '$1').split(':');\n  status.parameters[key] = {\n    key,\n    description: parametersDescription[key],\n    value: value.split(',').map((field) => Number(field)),\n  };\n}\n\nfunction parseQuestionMark(line, status) {\n  //  <Idle|MPos:0.000,0.000,0.000|FS:0,0|WCO:0.000,0.000,0.000>\n  const parts = line.replace(/<(.*)>/, '$1').split('|');\n  const message = parts[0];\n  const info = {};\n  for (let i = 1; i < parts.length; i++) {\n    const [key, value] = parts[i].split(':');\n    info[key] = value.split(',').map((v) => Number(v));\n  }\n  status.message = message;\n  status.info = { ...status.info, ...info };\n}\n","import { updateStatus } from './updateStatus.js';\n\nexport const GRBL = {\n  updateStatus,\n};\n","import delay from 'delay';\n\nimport { Device, STATUS_MISSING, STATUS_OPENED, STATUS_CLOSED } from './Device';\nimport EventEmitter from './util/EventEmitter';\nimport checkSerial from './util/checkSerial';\n\n/**\n * Class creating a new serial bridge to manage serial ports.\n * @param {object} [options={}]\n * @param {Array} [options.portFilter] Filter the serial ports to address.\n * @param {object} [options.command={}]\n * @param {number} [options.command.timeout=100] Time to wait for answer before timeout\n * @param {Function} [options.command.isEndCommandAnswer]\n * @param {Function} [options.command.endCommandAnswerCallback]\n * @param {object} [options.device={}]\n * @param {AsyncFunction} [options.device.getID=(device)=>()] Time to wait between commands in [ms]\n * @param {number} [options.device.baudRate=115200] Baud rate\n * @param {number} [options.device.interCommandDelay=100] Time to wait between commands in [ms]\n */\nexport class DevicesManager extends EventEmitter {\n  constructor(serial, options = {}) {\n    super();\n    checkSerial(serial);\n    this.serial = serial;\n    this.terminal = options.terminal;\n    this.logger = options.logger;\n    this.devices = [];\n    this.portFilter = options.portFilter;\n    this.commandOptions = options.command ?? {};\n    this.deviceOptions = options.device ?? {};\n  }\n\n  /**\n   * By calling this method from a click you give users the possibility to allow access to some devices\n   */\n  async requestDevices() {\n    await this.serial.requestPort({\n      filters: this.portFilter,\n    });\n    return this.updateDevices();\n  }\n\n  /**\n   * Update this.devices\n   */\n  async updateDevices() {\n    const serialPorts = await this.serial.getPorts();\n\n    this.logger?.trace('start updateDevices');\n\n    const missingDevicesSerialPort = this.devices.filter(\n      (device) => !serialPorts.includes(device.serialPort),\n    );\n    for (let device of missingDevicesSerialPort) {\n      if (device.status !== STATUS_MISSING && device.status !== STATUS_CLOSED) {\n        device.close();\n      }\n      device.status = STATUS_MISSING;\n    }\n    for (let serialPort of serialPorts) {\n      let device = this.devices.find(\n        (device) => device.serialPort === serialPort,\n      );\n      if (device) {\n        await device.ensureOpen();\n      } else {\n        const serialPortInfo = serialPort.getInfo();\n        let newDevice = new Device(serialPort, {\n          baudRate: this.baudRate,\n          terminal: this.terminal,\n          ...serialPortInfo,\n          commandOptions: this.commandOptions,\n          deviceOptions: this.deviceOptions,\n          logger: this.logger.child({\n            kind: 'Device',\n            ...serialPort.getInfo(),\n          }),\n        });\n        this.devices.push(newDevice);\n        await newDevice.open();\n      }\n    }\n\n    this.logger?.trace('finish updateDevices');\n  }\n\n  /**\n   * Update this.devices every `scanInterval` [ms].\n   * @param {object} [options={}]\n   * @param {number} [options.scanInterval=1000] Delay between `updateDevices()` calls\n   * @param {number} [options.callback] Callback to execute on each update\n   */\n  async continuousUpdateDevices(options = {}) {\n    const { scanInterval = 1000, callback } = options;\n    while (true) {\n      await this.updateDevices();\n      if (callback) {\n        callback(this.devices);\n      }\n      await delay(scanInterval);\n    }\n  }\n\n  /**\n   * Returns this.devices\n   * @param {object} [options={}]\n   * @param {bool} [options.ready=false] If `true` returns only currently connected device. If `false` returns all devices ever connected.\n   * @returns {Array<object>}\n   */\n  getDevicesList(options = {}) {\n    let { ready = false } = options;\n    return this.devices\n      .filter((device) => !ready || device.isReady())\n      .map((device) => ({\n        status: device.status,\n        id: device.id,\n        queueLength: device.queue.length,\n      }));\n  }\n\n  // private function\n  findDevice(id) {\n    if (id === undefined) return undefined;\n    let devices = this.devices.filter(\n      (device) => device.id === id && device.status === STATUS_OPENED,\n    );\n    if (devices.length === 0) return undefined;\n    if (devices.length > 1) {\n      throw new Error(`Many devices have the same id: ${id}`);\n    }\n    return devices[0];\n  }\n\n  /**\n   * Send a serial command to a device.\n   * @param {number} id ID of the device\n   * @param {string} command Command to send\n   * @param {object} [options={}] options\n   * @param {number} [options.timeout] Timeout in [ms]\n   * @param {number} [options.timeoutResolve=false] If `true` the promise will resolve even if the command timed out\n   */\n  async sendCommand(id, command, options = {}) {\n    const device = this.findDevice(id);\n    if (!device) {\n      throw Error(`Device ${id} not found`);\n    }\n    if (device && device.isReady()) {\n      return device.get(command, options);\n    }\n    throw Error(`Device ${id} not ready: ${device.port.path}`);\n  }\n}\n","/* eslint-disable no-console */\nexport default function checkSerial(serial) {\n  if (!serial) {\n    console.error(\n      \"Web serial doesn't seem to be enabled in your browser. Try enabling it by visiting:\",\n    );\n    console.error('chrome://flags/#enable-experimental-web-platform-features');\n    console.error('opera://flags/#enable-experimental-web-platform-features');\n    console.error('edge://flags/#enable-experimental-web-platform-features');\n  }\n}\n","import { v4 } from '@lukeed/uuid';\n\nexport class Terminal {\n  constructor(options = {}) {\n    this.lineNumber = 0;\n    this.eventNumber = 0;\n    this.limit = options.limit || 1000;\n    this.onChange = options.onChange;\n    this.ignoreSend = options.ignoreSend ?? [];\n    this.ignoreReceive = options.ignoreReceive ?? [];\n    this.showSpecial = options.showSpecial || true;\n    this.sendColor = options.sendColor || '#41c5d1';\n    this.receiveColor = options.receiveColor || '#2ea600';\n    this.events = [];\n  }\n\n  send(text) {\n    this.append(text, 'send');\n  }\n\n  receive(text) {\n    this.append(text, 'receive');\n  }\n\n  shouldIgnore(line, kind) {\n    const ignores = kind === 'send' ? this.ignoreSend : this.ignoreReceive;\n    for (let ignore of ignores) {\n      if (ignore.test(line)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  append(text, kind) {\n    const lines = splitInLines(text, this.showSpecial);\n    this.eventNumber++;\n    const newEvents = [];\n    for (let line of lines) {\n      this.lineNumber++;\n      const event = {\n        uuid: v4(),\n        lineNumber: this.lineNumber,\n        eventNumber: this.eventNumber,\n        kind,\n        line,\n      };\n      if (!this.shouldIgnore(line, kind)) {\n        newEvents.push(event);\n        this.events.push(event);\n      }\n    }\n\n    if (this.events.length > this.limit) {\n      this.events.splice(0, this.events.length - this.limit);\n    }\n\n    this.onChange?.(newEvents, this.events);\n  }\n\n  toHtml() {\n    let html = [];\n    html.push('<div style=\"background-color:black\">');\n    for (let event of this.events) {\n      html.push(\n        `<div style=\"color: ${\n          event.kind === 'send' ? this.sendColor : this.receiveColor\n        }\">${htmlEscape(event.line)}</div>`,\n      );\n    }\n    html.push('</div>');\n    return html.join('\\n');\n  }\n}\n\nfunction splitInLines(text, showSpecial) {\n  if (showSpecial) {\n    text = text\n      .replace(/\\r/g, '<CR>')\n      .replace(/\\n/g, '<LF>\\n')\n      .replace(/\\t/g, '<TAB>\\t');\n  }\n  return text.split(/\\r?\\n/);\n}\n\nfunction htmlEscape(str) {\n  return str.replace(/&/g, '&amp').replace(/>/g, '&gt').replace(/</g, '&lt');\n}\n"],"names":["createAbortError","error","Error","name","createDelay","_ref","clearTimeout","defaultClear","setTimeout","set","willResolve","ms","timeoutId","settle","rejectFn","value","signal","arguments","length","undefined","aborted","Promise","reject","clear","signalListener","cleanup","removeEventListener","delayPromise","resolve","addEventListener","once","createWithTimers","clearAndSet","delay","range","minimum","maximum","options","randomInteger","Math","floor","random","delayModule","exports","delay$2","default","encoder","TextEncoder","decoder","TextDecoder","Action","constructor","command","device","this","currentTimeout","timeout","timeoutResolve","kind","answer","partialAnswer","logger","status","creationTimestamp","Date","now","promise","isEndCommandAnswer","endCommandAnswerCallback","info","isFinished","terminal","receive","async","startTimestamp","writeText","then","readText","dataArrayBuffer","encode","send","writer","write","chunk","reader","read","decode","statusLabels","Device","serialPort","commandOptions","deviceOptions","setStatus","id","baudRate","interCommandDelay","getID","usbVendorId","usbProductId","queue","action","statusLabel","isReady","currentProcessQueue","runProcessQueue","shift","writeRead","catch","toString","trace","counter","open","close","ensureOpen","readable","getReader","writable","getWriter","child","push","ensureProcessQueue","path","EventEmitter","callbacks","on","event","cb","emit","data","cbs","forEach","BUFFER","IDX","HEX","substring","v4","num","i","out","Array","errorsDescription","parametersDescription","settingsDescription","$0","$1","$2","$3","$4","$5","$6","$10","$11","$12","$13","$20","$21","$22","$23","$24","$25","$26","$27","$30","$31","$32","$100","$101","$102","$110","$111","$112","$120","$121","$122","$130","$131","$132","parseErrors","line","split","code","description","parseSettings","key","settings","Number","parseParameters","replace","parameters","map","field","parseQuestionMark","parts","message","v","GRBL","updateStatus","input","lines","startsWith","version","serial","super","console","checkSerial","devices","portFilter","requestPort","filters","updateDevices","serialPorts","getPorts","missingDevicesSerialPort","filter","includes","find","serialPortInfo","getInfo","newDevice","scanInterval","callback","getDevicesList","ready","queueLength","findDevice","get","port","lineNumber","eventNumber","limit","onChange","ignoreSend","ignoreReceive","showSpecial","sendColor","receiveColor","events","text","append","shouldIgnore","ignores","ignore","test","splitInLines","newEvents","uuid","splice","toHtml","html","str","join"],"mappings":"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"}